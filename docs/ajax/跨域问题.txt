
一、产生跨域问题的原因
    1、浏览器限制
    2、跨域（协议、域名、端口）
    3、XHR（XMLHttpRequest）请求
    以上3点同时满足的情况下才会出现跨域问题
	
二、如何解决跨域问题，思路有三
    1、指定浏览器参数，禁止浏览器限制跨域
       命令行参数启动浏览器：--disable-web-security
       (价值不高，不可能让每个用户修改浏览器启动参数)
	   
    2、使用JSONP(非官方协议，只是一个约定)
	   实现原理：前后台约定，如果请求参数有callback（可以自定义），那么后台返回javascript代码而不是json数据
	   前台发出请求类型是script（通过动态创建script标签实现发送script类型的请求，script标签用完就销毁），有callback参数
       后台需求修改：返回js代码 application/javascript
	   
	   简单示例：
	   前端
	       <body>
			<a href="#" onclick="get1()">发送get1请求</a>
			<script>
			  function get1() {
				 $.ajax({
					 url:"http://localhost:8081/jsonpserver/getdate",
					 dataType:"jsonp",
					 success:function(json) {
						 console.log(json);
					 }
				 });
			  }
			</script>
		  </body>
	   后台
	       public class JsonpService extends HttpServlet{
    
			protected void doGet(HttpServletRequest req, HttpServletResponse res) {
				doPost(req, res);
			}
			
			protected void doPost(HttpServletRequest req, HttpServletResponse res) {
				try {
					String data = "hello world!";
					//前端传过来的回调函数名称
					String callback = req.getParameter("callback");
					res.getWriter().write(callback + "('"+data+"')");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		更多示例参考：https://www.cnblogs.com/chiangchou/p/jsonp.html
	   
    3、消除跨域：(1)修改被调用方使被调用方支持跨域
	        (2)修改调用方，隐藏跨域，通过代理

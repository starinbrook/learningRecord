/*
* 数据结构与算法
*/
=================================================================================================================
一、基础概念
1、是什么？
数据结构是一组数据的存储结构；算法是操作数据的一组方法；

2、数据结构与算法的关系？
数据结构与算法是相辅相成的。数据结构是为算法服务的，算法要作用在特定的数据结构之上。

3、20个最基础的数据结构与算法？
10个数据结构：
数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie树；
10个算法：
递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法；

4、衡量标准-复杂度分析？
效率衡量标准：时间复杂度
资源消耗衡量标准：空间复杂度
=================================================================================================================
二、复杂度分析
1、为什么需要复杂度分析？
测试结果依赖测试环境；
测试结果受数据规模影响；

2、大O复杂度表示法
（1）只关注循环执行次数最多的一段代码；
（2）加法法则：总复杂度等于量级最大的那段代码的复杂度；
（3）乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积；

3、复杂度量级
多项式量级：
	常量阶：O(1) 
	对数阶：O(logn) 
	线性阶：O(n) 
	线性对数阶：O(nlogn) 
	平方阶：O(n2) (n的2次方)
	O(1) < O(logn) < O(n) < O(nlogn) < O(n2)
非多项式量级：
	指数阶：O(2n) (2的n次方)
	阶乘阶：O(n!)
	
4、NP（Non-Deterministic Polynomial，非确定多项式）问题
把时间复杂度为非多项式量级的算法问题叫作NP问题。（？？？）

扩展阅读:P问题、NP问题、NPC问题（NP完全问题）、NP hard问题
https://blog.csdn.net/csshuke/article/details/74909562
https://blog.csdn.net/K346K346/article/details/51026006#commentBox
P问题：如果一个问题可以找到一个能在多项式的时间复杂度里【解决】它的算法，那么这个问题就属于P问题；
NP问题：NP问题是指可以在多项式的时间里【验证】一个解的问题。

P类问题就是指那些计算机比较容易算出答案的问题。
NP类问题就是指那些已知答案以后计算机可以比较容易地验证答案的问题。
=================================================================================================================
三、数组
1、是什么？
数组（Array）是一种【线性表】（数据只有前后两个方向）结构。它用一组【连续的内存空间】，来存储一组具有【相同类型的数据】。
2、数组元素存储地址计算公式
a[i]_address = base_address + i * data_type_size
3、特点
高效的随机访问、低效的插入删除
4、标记-清楚的思想（优化删除一次移动一次）
=================================================================================================================
四、链表
1、单链表
2、双向链表
3、（双向）循环链表
4、如何用链表实现LRU缓存淘汰策略？
	思路：维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。
	（1）如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。
	（2）如果此数据没有在缓存链表中，又可以分为两种情况：
		如果此时缓存未满，则将此结点直接插入到链表的头部；
		如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。
	实现方式：
	（1）继承LinkedHashMap，实现其removeEldestEntry方法
	（2）只使用链表实现
	（3）使用链表+HashMap实现
5、如何用单链表判断回文串？
	思路：快慢指针法定位到中间节点
6、空间换取时间/时间换取空间的思想
7、快慢指针：
	（1）快慢指针一起走，只是走的步长不同，慢指针一次走一步，快指针一次走两步：定位中间节点
	（2）快指针先走k步，然后快慢指针再一起走：定位倒数第k个节点
8、单链表反转？
9、链表中环的检测？
10、两个有序的链表合并？
11、删除链表倒数第n个节点？
12、求链表的中间节点？
13、哨兵节点简化代码
---------------------------------------------------------------------------------------
package com.zhuyca.linkedlist;

/**
 * Title: Node.java<br>
 * Description: 链表节点定义<br>
 * Copyright: Copyright (c) 2018<br>
 *
 * @author zhuyongchang
 * @date 2018年10月07日
 */
public class Node<E> {
    protected Node next; //指针域
    public E data; //数据域

    public Node(E data) {
        this.data = data;
    }

    public void display() {
        System.out.print(data + "->");
    }
}
---------------------------------------------------------------------------------------
package com.zhuyca.linkedlist;

/**
 * Title: LinkedList.java<br>
 * Description: 单链表定义<br>
 * Copyright: Copyright (c) 2018<br>
 *
 * @author zhuyongchang
 * @date 2018年10月07日
 */
public class LinkedList<E> {
    public Node first; //头节点
    private int pos = 0; //节点的位置

    public LinkedList() {
        this.first = null;
    }

    // 从链表头部插入节点
    public void addFirstNode(E data) {
        Node node = new Node(data);
        node.next = first;
        first = node;
    }

    // 从链表头部删除节点
    public Node deleteFirstNode() {
        Node tempNode = first;
        first = tempNode.next;
        return tempNode;
    }

    // 从指定位置插入节点
    public void add(int index, E data) {
        Node node = new Node(data);
        Node current = first;
        Node previous = first;
        while (pos != index) {
            previous = current;
            current = current.next;
            pos++;
        }
        node.next = current;
        previous.next = node;
        pos = 0;
    }

    // 删除指定位置节点
    public Node deleteByPos(int index) {
        Node current = first;
        Node previous = first;
        while (pos != index) {
            pos++;
            previous = current;
            current = current.next;
        }
        if (current == first) {
            first = first.next;
        } else {
            pos = 0;
            previous.next = current.next;
        }
        return current;
    }

    // 删除指定数据的节点
    public Node deleteByData(E data) {
        Node current = first;
        Node previous = first;
        while (current.data != data) {
            if (current.next == null) {
                return null;
            }
            previous = current;
            current = current.next;
        }
        if (current == first) {
            first = first.next;
        } else {
            previous.next = current.next;
        }
        return current;
    }

    // 根据索引查找
    public Node findByPos(int index) {
        Node current = first;
        while (pos != index) {
            current = current.next;
            pos++;
        }
        pos = 0;
        return current;
    }

    // 根据数据查找
    public Node findByData(E data) {
        Node current = first;
        while (current.data != data) {
            if (current.next == null) {
                return null;
            }
            current = current.next;
        }
        return current;
    }

    // 展示所有节点
    public void displayAllNodes() {
        Node current = first;
        while (current != null) {
            current.display();
            current = current.next;
        }
    }
}
---------------------------------------------------------------------------------------
package com.zhuyca.linkedlist;

/**
 * Title: Test.java<br>
 * Description: 测试单链表，包括单链表反转、判断单链表是否回文串<br>
 * Copyright: Copyright (c) 2018<br>
 *
 * @author zhuyongchang
 * @date 2018年10月07日
 */
public class Test {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.addFirstNode("a");
        list.addFirstNode("b");
        list.addFirstNode("c");

        System.out.println(isPalindrome(list));
    }

    /**
     * 使用快慢指针法判断单链表是否回文串
     * 1、快慢指针定位到中间位置
     * 2、将slow定位后半段链表反转
     * 3、反转后的子链表和原链表节点一一对比，若全都相同则是回文串
     * @param list
     * @return
     */
    public static boolean isPalindrome(LinkedList list) {
        boolean isPalindrome = true;
        Node fast = list.first;
        Node slow = list.first;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        LinkedList subList = new LinkedList();
        subList.first = slow;
        reverse(subList);

        Node p = list.first;
        Node q = subList.first;
        while (p != null && q != null) {
            if (!String.valueOf(p.data).equals(String.valueOf(q.data))) {
                isPalindrome = false;
                break;
            }
            p = p.next;
            q = q.next;
        }
        return isPalindrome;
    }

    /**
     * 单链表反转（不借助辅助存储空间，就地反转）
     * @param list
     */
    public static void reverse(LinkedList list) {
        if (list == null || list.first == null) return;
        Node p = list.first;
        Node q = list.first;
        Node t = null;
        while (p.next != null) {
            q = p.next;
            p.next = t;
            t = p;
            p = q;
        }
        p.next = t;
        list.first = p;
    }
	
	/**
     * 删除倒数第k个节点元素
     * 1、使用快慢指针法定位倒数第k个节点
     * 2、删除倒数第k个节点
     * @param list
     * @param k
     * @return
     */
    public static void deleteCountdownK(LinkedList list, int k) {
        Node fast = list.first;
        Node slow = list.first;
        Node pre = null;
        while (k > 0 && fast != null) {
            fast = fast.next;
            k--;
        }
        if (k == 0 && fast == null) {
            list.first = slow.next;
            return;
        }
        if (k > 0) {
            System.out.println("overflow");
            return;
        }
        while (fast != null) {
            if (fast.next == null) {
                pre = slow;
            }
            slow = slow.next;
            fast = fast.next;
        }
        pre.next = slow.next;
    }
	
	/**
     * 合并两个有序的单链表（递归）
     * @param list1
     * @param list2
     * @return
     */
    public static LinkedList combine(LinkedList list1, LinkedList list2) {
        LinkedList list = new LinkedList();
        if (list1 == null || list1.first == null) {
            return list2;
        } else if (list2 == null || list2.first == null) {
            return list1;
        }

        if ((int) list1.first.data < (int) list2.first.data) {
            list.first = list1.first;
            LinkedList list3 = new LinkedList();
            list3.first = list1.first.next;
            list.first.next = combine(list3, list2).first;
        } else {
            list.first = list2.first;
            LinkedList list3 = new LinkedList();
            list3.first = list2.first.next;
            list.first.next = combine(list3, list1).first;
        }
        return list;
    }
	
	/**
     * 检测单链表中是否存在环
     * 1、设置快慢指针，快指针每次2步，慢指针每次1步
     * 2、若快指针能够走到最后说明无环
     * 3、若快指针和慢指针相遇则说明有环
     * @param list
     * @return
     */
    public static boolean hasLoop(LinkedList list) {
        boolean flag = false;
        if (list != null && list.first != null) {
            Node fast = list.first;
            Node slow = list.first;
            while (fast != null && fast.next != null) {
                slow = slow.next;
                fast = fast.next.next;
                if (slow == fast) {
                    flag = true;
                    break;
                }
            }
        }
        return flag;
    }
}
---------------------------------------------------------------------------------------
=================================================================================================================
五、栈
1、是什么？
栈是一种“操作受限”的线性表，只允许在一端插入（入栈）和删除（出栈）数据。后进的先出、先进的后出。
2、实现方式？
（1）用数组实现：顺序栈
（2）用链表实现：链式栈
3、栈的应用
（1）函数调用
（2）表达式求值
（3）括号匹配
=================================================================================================================



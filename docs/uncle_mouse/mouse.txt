
一、深入理解 IEEE 754 浮点数表示法
1、将32bits分成三段：
（1）S（sign）：符号位，1bit；
（2）E（Exponent）：指数，8bits；
（3）M（Mantissa）：尾数，23bits。
2、一个小数的计算公式（LaTeX编辑）：
$$(-1)^{S}\ast(1+\frac{M}{2^{23}})\ast 2^{(E-127)}$$
3、基于的思想
对于任何数x，都可以找到一个n，使得 2^n <= x <= 2^(n+1) 成立。
那么，如果将 2^n 到 2^(n+1) 之间分成 2^23份，从 2^n 到 x 占了 M/(2^23) 份。
（1）符号位，表示正负；
（2）指数8位可以表示0-255，为了表示小数，使指数可能为负，取值-127-128，因此表示为：E-127
（3）x 处于 2^n 到 2^(n+1) 之间，因此，x可以表示为 
	x = 2^n +（2^(n+1) - 2^n）* M/(2^23)
	  = 2^n +（2*2^n - 2^n）* M/(2^23)
	  = 2^n + 2^n* M/(2^23)
	  = 2^n（1+M/(2^23)）
考虑到符号位，整理后也就是 (-1)^S * (1+M/(2^23)) * 2^(E-127)
4、精度问题产生的原因
比如，对于3.14这个小数来说，
（1）是正数，所以S=0；
（2）2^1 < 3.14 < 2^2。所以，n=1，也就是E-127=1，因此，E=128；
（3）(3.14-2^1) / (2^2-2^1) = 0.57，而 0.57 * 2^23 = 4781506.56，四舍五入得到 M = 4781507，因为此处有四舍五入，所以，产生了浮点数的精度问题。
把S E M转换成二进制，得到3.14的二进制表示：0 10000000 10010001111010111000011
再用IEEE 754标准的小数计算公式计算一下，1 * (1+4781507/2^23) * 2 = 3.1400001049041748046875，可以看出，确实产生了精度问题。

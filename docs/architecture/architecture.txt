
* 架构设计的关键思维是判断和取舍，程序设计的关键思维是逻辑和实现。

1、架构是什么？

   架构是顶层设计；
   框架是面向编程或配置的半成品；
   组件是从技术维度上的复用；
   模块是从业务维度上职责的划分；
   系统是相互协同可运行的实体。
   
   框架关注的是“规范”，架构关注的是“结构”。
   框架的英文是 Framework，架构的英文是 Architecture。
   
   软件架构指软件系统的顶层结构：
   首先，“系统是一群关联个体组成”，这些“个体”可以是“子系统”“模块”“组件”等；架构需要明确系统包含哪些“个体”。
   其次，系统中的个体需要“根据某种规则”运作，架构需要明确个体运作和协作的规则。
   第三，维基百科定义的架构用到了“基础结构”这个说法，我改为“顶层结构”，可以更好地区分系统和子系统，避免将系统架构和子系统架构混淆在一起导致架构层次混乱。
   
2、架构设计历史背景

   软件架构的出现有其历史必然性。
   20 世纪 60 年代第一次软件危机引出了“结构化编程”，创造了“模块”概念；
   20 世纪 80 年代第二次软件危机引出了“面向对象编程”，创造了“对象”概念；
   到了 20 世纪 90 年代“软件架构”开始流行，创造了“组件”概念。
   我们可以看到，“模块”“对象”“组件”本质上都是对达到一定规模的软件进行拆分，差别只是在于随着软件的复杂度不断增加，拆分的粒度越来越粗，拆分的层次越来越高。
   
   一个成功的软件设计是要适应并满足业务需求，同时不断“演化”的。设计需要根据业务的变化、技术的发展不断进行“演进”，这就决定了这是一个动态活动，出现新问题，解决新问题，没有所谓的“一招鲜”。
   
   整个软件技术发展的历史，其实就是一部与“复杂度”斗争的历史，架构的出现也不例外
   
3、架构设计的目的
   
   架构设计的主要目的是为了解决软件系统复杂度带来的问题。
   
   通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计。
   架构设计并不是要面面俱到，不需要每个架构都具备高性能、高可用、高扩展等特点，而是要识别出复杂点然后有针对性地解决问题。
   理解每个架构方案背后所需要解决的复杂点，然后才能对比自己的业务复杂点，参考复杂点相似的方案。

4 复杂度的来源――高性能

  （1）单台计算机内部为了高性能带来的复杂度
   手工操作―>批处理操作系统―>多进程（分时系统）―>多线程（分时系统）―>多CPU（真正并行）

   如果我们要完成一个高性能的软件系统，需要考虑如多进程、多线程、进程间通信、多线程并发等技术点，而且这些技术并不是最新的
   就是最好的，也不是非此即彼的选择。在做架构设计的时候，需要花费很大的精力来结合业务进行分析、判断、选择、组合，这个过程
   同样很复杂。  

  （2）多台计算机集群为了高性能带来的复杂度

   方式一：任务分配
          增加服务器，每个服务器上运行着相同的业务逻辑

          需要增加一个任务分配器
          任务分配器和真正的业务服务器之间有连接和交互
          任务分配器需要增加分配算法

   方式二：任务分解
          把一个大且复杂的业务系统，拆分成多个小而简单的业务系统，例如微信后台架构从逻辑上将业务进行了拆分，拆分成多个子业务，
          包括：接入/注册登陆/消息/摇一摇/漂流瓶/聊天/视频/朋友圈等，各个子业务系统单独部署到不同的服务器上，也就是说任务分解
          也增加了服务器数量，但是每个服务器上运行不同的业务逻辑
		  
5、复杂度的来源――高可用
         
    高可用：系统无中断地执行其功能的能力，代表系统的可用性程度，是进行系统设计时的准则之一。
	关键点：无中断
	系统高可用方案有很多，但本质上都是通过“冗余”来实现高可用。
    
	高可用的“冗余”解决方案，单纯从形式上来看，和高性能是一样的，都是通过增加更多机器来达到目的，但其实本质上是有根本区别的：
	高性能增加机器目的在于“扩展”处理性能；高可用增加机器目的在于“冗余”处理单元；
	
   （1）计算高可用
        
		任务分配
		        双机架构
				        主备：单纯的一台机器在跑流量，另一台机器实时地同步数据库，一旦主机宕机，备机立刻进入工作状态
						    冷备  冷备份服务器（cold server），平常情况下是关机状态，只有当主服务器宕机才开机
							温备  温备份服务器（warm server），周期性开机，根据主服务器内容进行更新，然后关机
							热备  热备份服务器（hot server），时刻处于开机状态，同主机保持同步，主机宕机时，可以随时启用热备份服务器
						主主：两台机都是同时工作，有真正做到负载均衡的作用
				集群架构（总数m + n）
				        m 主 n 备
   
   （2）存储高可用
   
        数据 + 逻辑 = 业务
		
		无论是正常情况下的传输延迟，还是异常情况下的传输中断，都会导致系统的数据在某个时间点或者时间段是不一致的，而数据的不一致又会导致业务问题；
		但如果完全不做冗余，系统的整体高可用又无法保证，所以存储高可用的难点不在于如何备份数据，而在于如何减少或者规避数据不一致对业务造成的影响。
		
	
	状态决策（高可用的基础）
	（1）独裁式
	（2）协商式
	（3）民主式
	



   
   
   
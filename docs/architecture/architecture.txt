
* 架构设计的关键思维是判断和取舍，程序设计的关键思维是逻辑和实现。

1、架构是什么？

   架构是顶层设计；
   框架是面向编程或配置的半成品；
   组件是从技术维度上的复用；
   模块是从业务维度上职责的划分；
   系统是相互协同可运行的实体。
   
   框架关注的是“规范”，架构关注的是“结构”。
   框架的英文是 Framework，架构的英文是 Architecture。
   
   软件架构指软件系统的顶层结构：
   首先，“系统是一群关联个体组成”，这些“个体”可以是“子系统”“模块”“组件”等；架构需要明确系统包含哪些“个体”。
   其次，系统中的个体需要“根据某种规则”运作，架构需要明确个体运作和协作的规则。
   第三，维基百科定义的架构用到了“基础结构”这个说法，我改为“顶层结构”，可以更好地区分系统和子系统，避免将系统架构和子系统架构混淆在一起导致架构层次混乱。
   
2、架构设计历史背景

   软件架构的出现有其历史必然性。
   20 世纪 60 年代第一次软件危机引出了“结构化编程”，创造了“模块”概念；
   20 世纪 80 年代第二次软件危机引出了“面向对象编程”，创造了“对象”概念；
   到了 20 世纪 90 年代“软件架构”开始流行，创造了“组件”概念。
   我们可以看到，“模块”“对象”“组件”本质上都是对达到一定规模的软件进行拆分，差别只是在于随着软件的复杂度不断增加，拆分的粒度越来越粗，拆分的层次越来越高。
   
   一个成功的软件设计是要适应并满足业务需求，同时不断“演化”的。设计需要根据业务的变化、技术的发展不断进行“演进”，这就决定了这是一个动态活动，出现新问题，解决新问题，没有所谓的“一招鲜”。
   
   整个软件技术发展的历史，其实就是一部与“复杂度”斗争的历史，架构的出现也不例外
   
3、架构设计的目的
   
   架构设计的主要目的是为了解决软件系统复杂度带来的问题。
   
   通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计。
   架构设计并不是要面面俱到，不需要每个架构都具备高性能、高可用、高扩展等特点，而是要识别出复杂点然后有针对性地解决问题。
   理解每个架构方案背后所需要解决的复杂点，然后才能对比自己的业务复杂点，参考复杂点相似的方案。
   
   
   
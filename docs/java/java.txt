
Java核心技术36讲


1 谈谈你对 Java 平台的理解？“Java 是解释执行”，这句话正确吗？
  
  Java本身是一种面向对象的语言，最显著的特性有两个方面，一是所谓的“一次编译，到处执行”（Compile once，run anywhere），
能够非常容易地获得跨平台能力；另外就是垃圾收集（GC，Garbage Collection），Java通过垃圾收集器（Garbage Collector）回收分配
内存，大部分情况下，程序员不需要自己操心内存的分配和回收。
  
  我们日常会接触到JRE（Java Runtime Environment）或者JDK（Java Development Kit）。JRE，也就是Java运行环境，包含了JVM和Java
类库，以及一些模块等。而JDK可以看作是JRE的一个超集，提供了更多工具，比如编译器/各种诊断工具等。

  对于“Java是解释执行”这句话，这个说法不太准确。我们开发的Java源代码，首先通过javac编译成为字节码（bytecode），然后，在
运行时，通过Java虚拟机（JVM）内嵌的解释器将字节码转换成为最终的机器码。但是常见的JVM，比如我们大多数情况使用的Oracle JDK
提供的Hotspot JVM，都提供了JIT（Just-In-Time）编译器，也就是通常所说的动态编译器，JIT能够在运行时将热点代码编译成机器码，这
种情况下部分热点代码就属于编译执行，而不是解释执行了。

  众所周知，我们通常把Java分为编译期和运行时。这里说的Java的编译和C/C++是有着不同意义的，Java的编译，编译Java源码生成
“.class”文件，里面实际是字节码，而不是可以直接执行的机器码。Java通过字节码和Java虚拟机（JVM）这种跨平台的抽象，屏蔽了
操作系统和硬件的细节，这也是实现“一次编译，到处执行”的基础。

  在运行时，JVM会通过类加载器（Class-Loader）加载字节码，解释或者编译执行。主流Java版本中，如JDK8实际是解释和编译混合的一种
模式，即所谓的混合模式（-Xmixed）。


2、请对比Exception 和 Error，另外，运行时异常和一般异常有什么区别？

  Exception 和 Error 都是继承了Throwable类，在Java中只有Throwable类型的示例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。
   
  Exception 和 Error 体现了Java平台设计者对不同异常情况的分类。
  Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。
  Error 是指在正常情况下，不大可能出现的情况，绝大部分的Error都会导致程序（比如JVM自身）处于非正常的、不可恢复状态。既然是非正常情况，所以不便于也
不需要捕获，常见的比如OutOfMemoryError之类，都是Error的子类。

  Exception 又分为可检查（checked）异常和不检查（unchecked）异常，可检查异常在源代码里必须显示地进行捕获处理，这是编译期检查的一部分。
  不检查异常就是所谓的运行时异常（RuntimeException），类似NullPointerException、ArrayIndexOutOfBoundsException之类，通常是可以编码避免的逻辑错误，
具体根据需要来判断是否需要捕获，并不会在编译期强制要求。


  扩展问题
  2.1 你了解哪些Error、Exception或者RuntimeException？
      Error:
            NoClassDefFoundError
      Exception: 
            IOException
			ClassNotFoundException
      RuntimeException:
	        NullPointerException
			ClassCastException
            	  
  2.2 NoClassDefFoundError 和 ClassNotFoundException 有什么区别？
      https://www.cnblogs.com/xing901022/p/4185514.html
	  http://wxl24life.iteye.com/blog/1919359
	  https://blog.csdn.net/magister_feng/article/details/7459151
	  
	  以下是JDK1.6官方文档中对ClassNotFoundException 和 NoClassDefFoundError的描述
	  
	  ClassNotFoundException:
	  Thrown when an application tries to load in a class through its string name using:
      The forName method in class Class.
      The findSystemClass method in class ClassLoader .
      The loadClass method in class ClassLoader.
      but no definition for the class with the specified name could be found.
	  
	  NoClassDefFoundError:
	  Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in the definition of a class 
	  (as part of a normal method call or as part of creating a new instance using the new expression) and no definition of the class could be found.
	  The searched-for class definition existed when the currently executing class was compiled, but the definition can no longer be found.
	  
  异常处理最佳实践原则
  (1)尽量不要捕获类似Exception这样的通用异常，而是应该捕获特定异常；
  (2)不要生吞异常（也就是捕获了异常，但不做任何处理// Ignore it）;
  (3)在产品代码中不允许使用e.printStackTrace();处理异常，应该使用产品日志，详细输出到日志系统里；
  (4)Throw early，catch late
  (5)仅捕获必要的代码段，尽量不要一个大的try包住整段代码
  (6)尽量不要使用异常控制代码流程
  
  Java异常处理机制带来的性能问题
  (1)try-catch 代码段会产生额外的性能开销
  (2)Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作
  

3、谈谈final、finally、finalize有什么不同？
  
  final可以修饰类、方法、变量，分别有不同的意义，final修饰的class代表不可以继承扩展，final修饰的变量是不可以修改的，而final修饰的方法是不可以重写的（override）。
  
  finally则是Java保证重点代码一定要被执行的一种机制。我们可以使用try-finally或者try-catch-finally来进行类似关闭JDBC连接、保证unlock等动作。

  finalize是基础类java.lang.Object的一个方法，它的设计目的是保证对象在被垃圾收集前，完成特定资源的回收。finalize机制现在已经不推荐使用，并且在JDK1.9开始被标记为deprecated。
  
  最佳实践
  推荐使用final关键字来明确表示我们代码的语义、逻辑意图
  （1）我们可以将方法或者类声明为final，这样就可以明确告知别人，这些行为是不许修改的；
  （2）使用final修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误；
  （3）final变量产生了某种程度的不可变（immutable）的效果，所以，可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值 final 变量，
       有利于减少额外的同步开销，也可以省去一些防御性拷贝的必要。
	   
  注意：finally的特例代码
  try {
    // do something
    System.exit(1);
  } finally{
    System.out.println(“Print from finally”);
  }
  上面 finally 里面的代码可不会被执行的哦，这是一个特例。

  
4 强引用、软引用、弱引用、幻象引用有什么区别？具体使用场景是什么？

  不同的引用类型，主要体现的是对象不同的可达性（reachable）状态和对垃圾收集的影响。
  
  强引用（"Strong" Reference）
  就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。
  对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，
  当然具体回收时机还是要看垃圾收集策略。
  
  软引用（SoftReference）
  是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。
  JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，
  当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。
  
  弱引用（WeakReference）
  并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。
  这就可以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。
  
  幻象引用
  有时候也翻译成虚引用，你不能通过它访问对象。
  幻象引用仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制，也有人利用幻象引用监控对象的创建和销毁。 
  
  知识扩展
  （1）对象可达性状态流转分析
	
  对象创建-->对象初始化-->强引用状态-->软引用-->弱引用-->finalize-->幻象引用--unreachable
                                |          |_________________|
								|____________________________|		  				
                                |_________|        | 
								|__________________|
  
  
  Java 定义的不同可达性级别（reachability level）：
  
  强可达（Strongly Reachable）
  就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。比如，我们新创建一个对象，那么创建它的线程对它就是强可达。
  
  软可达（Softly Reachable）
  就是当我们只能通过软引用才能访问到对象的状态。
  
  弱可达（Weakly Reachable）
  类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。
  这是十分临近 finalize 状态的时机，当弱引用被清除的时候，就符合 finalize 的条件了。
  
  幻象可达（Phantom Reachable）
  就是没有强、软、弱引用关联，并且 finalize 过了，只有幻象引用指向这个对象的时候。
  
  不可达（unreachable）
  意味着对象可以被清除了。
  
  
  判断对象可达性，是 JVM 垃圾收集器决定如何处理对象的一部分考虑。
  
  所有引用类型，都是抽象类 java.lang.ref.Reference 的子类，它提供了 get() 方法：
  T get() 
  
  除了幻象引用（因为 get 永远返回 null），如果对象还没有被销毁，都可以通过 get 方法获取原有对象。
  这意味着，利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态！
  
  所以，对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。
  
  如果我们错误的保持了强引用（比如，赋值给了 static 变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。
  所以，检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄漏的一个思路
  
  
5、理解 Java 的字符串，String、StringBuffer、StringBuilder 有什么区别？

  String 是 Java 语言非常基础和重要的类，提供了构造和管理字符串的各种基本逻辑。它是典型的 Immutable 类，被声明成为 final class，
  所有属性也都是 final 的。也由于它的不可变性，类似拼接、裁剪字符串等动作，都会产生新的 String 对象。由于字符串操作的普遍性，
  所以相关操作的效率往往对应用性能有明显影响。
  
  StringBuffer 是为解决上面提到拼接产生太多中间对象的问题而提供的一个类，它是 Java 1.5 中新增的，我们可以用 append 或者 add 方法，
  把字符串添加到已有序列的末尾或者指定位置。StringBuffer 本质是一个线程安全的可修改字符序列，它保证了线程安全，也随之带来了额外的性能开销，
  所以除非有线程安全的需要，不然还是推荐使用它的后继者，也就是 StringBuilder。
  
  StringBuilder 在能力上和 StringBuffer 没有本质区别，但是它去掉了线程安全的部分，有效减小了开销，是绝大部分情况下进行字符串拼接的首选。
  
  
  知识扩展
  
  (1) 字符串设计和实现
  String 是 Immutable 类的典型实现，原生的保证了基础线程安全，因为你无法对它内部数据进行任何修改；
  StringBuffer 的线程安全是通过把各种修改数据的方法都加上 synchronized 关键字实现的，非常直白；
  为了实现修改字符序列的目的，StringBuffer 和 StringBuilder 底层都是利用可修改的（char，JDK 9 以后是 byte）数组，
  二者都继承了 AbstractStringBuilder，里面包含了基本操作，区别仅在于最终的方法是否加了 synchronized。
  
  (2) 字符串缓存
  String 在 Java 6 以后提供了 intern() 方法，目的是提示 JVM 把相应字符串缓存起来，以备重复使用。
  在我们创建字符串对象并调用 intern() 方法的时候，如果已经有缓存的字符串，就会返回缓存里的实例，否则将其缓存起来。
  一般来说，JVM 会将所有的类似“abc”这样的文本字符串，或者字符串常量之类缓存起来。
  
  但是一般使用 Java 6 这种历史版本，并不推荐大量使用 intern，为什么呢？魔鬼存在于细节中，被缓存的字符串是存在所谓 PermGen 里的，
  也就是臭名昭著的“永久代”，这个空间是很有限的，也基本不会被 FullGC 之外的垃圾收集照顾到。所以，如果使用不当，OOM 就会光顾
  
  在后续版本中，这个缓存被放置在堆中，这样就极大避免了永久代占满的问题，甚至永久代在 JDK 8 中被 MetaSpace（元数据区）替代了。
  
  Intern 是一种显式地排重机制，但是它也有一定的副作用，因为需要开发者写代码时明确调用，一是不方便，每一个都显式调用是非常麻烦的；
  另外就是我们很难保证效率，应用开发阶段很难清楚地预计字符串的重复情况，有人认为这是一种污染代码的实践。
  
  幸好在 Oracle JDK 8u20 之后，推出了一个新的特性，也就是 G1 GC 下的字符串排重。它是通过将相同数据的字符串指向同一份数据来做到的，
  是 JVM 底层的改变，并不需要 Java 类库做什么修改。
  注意这个功能目前是默认关闭的，你需要使用下面参数开启，并且记得指定使用 G1 GC：-XX:+UseStringDeduplication
  
  (3) String 自身的演化
  Java 的字符串，在历史版本中，它是使用 char 数组来存数据的，这样非常直接。但是 Java 中的 char 是两个 bytes 大小，
  拉丁语系语言的字符，根本就不需要太宽的 char，这样无区别的实现就造成了一定的浪费。
  
  在 Java 9 中，引入了 Compact Strings 的设计，对字符串进行了大刀阔斧的改进。将数据存储方式从 char 数组，
  改变为一个 byte 数组加上一个标识编码的所谓 coder，并且将相关字符串操作类都进行了修改。
  虽然底层实现发生了这么大的改变，但是 Java 字符串的行为并没有任何大的变化，所以这个特性对于绝大部分应用来说是透明的，绝大部分情况不需要修改已有代码。
  

6、谈谈 Java 反射机制，动态代理是基于什么原理？

  题外话
  编程语言通常有各种不同的分类角度，动态类型和静态类型就是其中一种分类角度，简单区分就是语言类型信息是在运行时检查，还是编译期检查。
  与其近似的还有一个对比，就是所谓强类型和弱类型，就是不同类型变量赋值时，是否需要显式地（强制）进行类型转换。
  那么，如何分类 Java 语言呢？通常认为，Java 是静态的强类型语言，但是因为提供了类似反射等机制，也具备了部分动态类型语言的能力。
  
  反射机制是Java语言提供的一种基础功能，赋予程序在运行时自省（introspect，官方用语）的能力。
  通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。
  
  动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做的，比如用来包装RPC调用、面向切面的编程（AOP）。
  实现动态代理的方式很多，比如JDK自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，
  类似ASM、cglib（基于ASM）、Javassist等。
  
  
7、int 和 Integer 有什么区别？谈谈Integer的值缓存范围？

  int 是我们常说的整型数字，是Java的8个原始数据类型（Primitive Types，boolean、byte、short、char、int、float、double、long）之一。
  Java语言虽然号称一切都是对象，但是原始数据类型是例外。
  
  Integer是int对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在Java 5中，引入了自动装箱和自动拆箱功能
  （boxing/unboxing），Java可以根据上下文，自动进行转换，极大地简化了相关编程。
  
  关于Integer的值缓存，这涉及Java 5中另一个改进。构建Integer对象的传统方式是直接调用构造器，直接new一个对象。但是根据实践，我们发现大部分数据操作都是集中在
  有限的、较小的数值范围，因而，在Java 5中新增了静态工厂方法valueOf，在调用它的时候会利用一个缓冲机制，带来了明显的性能改进。按照Javadoc，这个值默认缓冲是
  -128到127之间。
  
  扩展问题
  （1）自动装箱/自动拆箱，发生在编译阶段还是运行时？
       编译阶段。
  （2）使用静态工厂方法valueOf会使用到缓存机制，那么自动装箱的时候，缓存机制起作用吗？
       起作用。
	   

8、对比 Vector、ArrayList、LinkedList 有何区别？

  这三者都是实现集合框架中的 List，也就是所谓的有序集合，因此具体功能也比较近似，比如都提供按照位置进行定位、添加或者删除的操作，都提供迭代器以遍历其内容等。
  但因为具体的设计区别，在行为、性能、线程安全等方面，表现又有很大不同。

  Verctor 是 Java 早期提供的线程安全的动态数组，如果不需要线程安全，并不建议选择，毕竟同步是有额外开销的。Vector 内部是使用对象数组来保存数据，
  可以根据需要自动的增加容量，当数组已满时，会创建新的数组，并拷贝原有数组数据。

  ArrayList 是应用更加广泛的动态数组实现，它本身不是线程安全的，所以性能要好很多。与 Vector 近似，ArrayList 也是可以根据需要调整容量，
  不过两者的调整逻辑有所区别，Vector 在扩容时会提高 1 倍，而 ArrayList 则是增加 50%。

  LinkedList 顾名思义是 Java 提供的双向链表，所以它不需要像上面两种那样调整容量，它也不是线程安全的。
  
  Vector 和 ArrayList 作为动态数组，其内部元素以数组形式顺序存储的，所以非常适合随机访问的场合。除了尾部插入和删除元素，往往性能会相对较差，
  比如我们在中间位置插入一个元素，需要移动后续所有元素。

  而 LinkedList 进行节点插入、删除却要高效得多，但是随机访问性能则要比动态数组慢。
  
  
9、对比 Hashtable、HashMap、TreeMap 有什么不同？谈谈你对 HashMap 的掌握。

  Hashtable、HashMap、TreeMap 都是最常见的一些 Map 实现，是以键值对的形式存储和操作数据的容器类型。

  Hashtable 是早期 Java 类库提供的一个哈希表实现，本身是同步的，不支持 null 键和值，由于同步导致的性能开销，所以已经很少被推荐使用。

  HashMap 是应用更加广泛的哈希表实现，行为上大致上与 HashTable 一致，主要区别在于 HashMap 不是同步的，支持 null 键和值等。
  通常情况下，HashMap 进行 put 或者 get 操作，可以达到常数时间的性能，所以它是绝大部分利用键值对存取场景的首选，
  比如，实现一个用户 ID 和用户信息对应的运行时存储结构。

  TreeMap 则是基于红黑树的一种提供顺序访问的 Map，和 HashMap 不同，它的 get、put、remove 之类操作都是 O（log(n)）的时间复杂度，
  具体顺序可以由指定的 Comparator 来决定，或者根据键的自然顺序来判断。
  
  
10、如何保证容器是线程安全的？ConcurrentHashMap 如何实现高效地线程安全？

  Java 提供了不同层面的线程安全支持。在传统集合框架内部，除了 Hashtable 等同步容器，还提供了所谓的同步包装器（Synchronized Wrapper），
  我们可以调用 Collections 工具类提供的包装方法，来获取一个同步的包装容器（如 Collections.synchronizedMap），但是它们都是利用非常粗粒度的同步方式，
  在高并发情况下，性能比较低下。

  另外，更加普遍的选择是利用并发包提供的线程安全容器类，它提供了：
  各种并发容器，比如 ConcurrentHashMap、CopyOnWriteArrayList。
  各种线程安全队列（Queue/Deque），如 ArrayBlockingQueue、SynchronousQueue。
  各种有序容器的线程安全版本等。

  具体保证线程安全的方式，包括有从简单的 synchronize 方式，到基于更加精细化的，比如基于分离锁实现的 ConcurrentHashMap 等并发实现等。
  具体选择要看开发的场景需求，总体来说，并发包内提供的容器通用场景，远优于早期的简单同步实现。
  

11、Java 提供了哪些 IO 方式？ NIO 如何实现多路复用？

  Java IO 方式有很多种，基于不同的 IO 抽象模型和交互方式，可以进行简单区分。

  首先，传统的 java.io 包，它基于流模型实现，提供了我们最熟知的一些 IO 功能，比如 File 抽象、输入输出流等。
  交互方式是同步、阻塞的方式，也就是说，在读取输入流或者写入输出流时，在读、写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。

  java.io 包的好处是代码比较简单、直观，缺点则是 IO 效率和扩展性存在局限性，容易成为应用性能的瓶颈。

  很多时候，人们也把 java.net 下面提供的部分网络 API，比如 Socket、ServerSocket、HttpURLConnection 也归类到同步阻塞 IO 类库，因为网络通信同样是 IO 行为。

  第二，在 Java 1.4 中引入了 NIO 框架（java.nio 包），提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，
  同时提供了更接近操作系统底层的高性能数据操作方式。

  第三，在 Java 7 中，NIO 有了进一步的改进，也就是 NIO 2，引入了异步非阻塞 IO 方式，也有很多人叫它 AIO（Asynchronous IO）。
  异步 IO 操作基于事件和回调机制，可以简单理解为，应用操作直接返回，而不会阻塞在那里，当后台处理完成，操作系统会通知相应线程进行后续工作。
  
  
  知识扩展
  以Socket实现简单的C/S为例：
  问题1：Java 语言目前的线程实现是比较重量级的，启动或者销毁一个线程是有明显开销的，每个线程都有单独的线程栈等结构，需要占用非常明显的内存，
         所以，每一个 Client 启动一个线程似乎都有些浪费。
  方案：引入线程池机制来避免浪费
        通过一个固定大小的线程池，来负责管理工作线程，避免频繁创建、销毁线程的开销，这是我们构建并发服务的典型方式
  问题2：如果连接数并不是非常多，只有最多几百个连接的普通应用，这种模式往往可以工作的很好。但是，如果连接数量急剧上升，这种实现方式就无法很好地工作了，
         因为线程上下文切换开销会在高并发时变得很明显，这是同步阻塞方式的低扩展性劣势。
  方案：NIO 引入的多路复用机制
        NIO 是利用了单线程轮询事件的机制，通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，
		频繁线程切换带来的问题
		

12、Java 有几种文件拷贝方式？哪一种最高效？

  Java 有多种比较典型的文件拷贝实现方式，比如：

  利用 java.io 类库，直接为源文件构建一个 FileInputStream 读取，然后再为目标文件构建一个 FileOutputStream，完成写入工作。
  
  ------------------------------------------------------------------------------------------------------
  public static void copyFileByStream(File source, File dest) throws
        IOException {
    try (InputStream is = new FileInputStream(source);
         OutputStream os = new FileOutputStream(dest);){
        byte[] buffer = new byte[1024];
        int length;
        while ((length = is.read(buffer)) > 0) {
            os.write(buffer, 0, length);
        }
    }
  }
  ------------------------------------------------------------------------------------------------------
  
  或者，利用 java.nio 类库提供的 transferTo 或 transferFrom 方法实现。
  
  ------------------------------------------------------------------------------------------------------
  public static void copyFileByChannel(File source, File dest) throws
        IOException {
    try (FileChannel sourceChannel = new FileInputStream(source)
            .getChannel();
         FileChannel targetChannel = new FileOutputStream(dest).getChannel
                 ();){
        for (long count = sourceChannel.size() ;count>0 ;) {
            long transferred = sourceChannel.transferTo(sourceChannel.position(), count, targetChannel);            
			sourceChannel.position(sourceChannel.position() + transferred);
            count -= transferred;
        }
    }
  }
  ------------------------------------------------------------------------------------------------------
  
  当然，Java 标准类库本身已经提供了几种 Files.copy 的实现。

  对于 Copy 的效率，这个其实与操作系统和配置等情况相关，总体上来说，NIO transferTo/From 的方式可能更快，因为它更能利用现代操作系统底层机制，
  避免不必要拷贝和上下文切换。
 

13 谈谈抽象类和接口有什么区别？

  接口和抽象类是Java面向对象设计的两个基础机制。
  
  接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到API定义和实现分离的目的。
  接口，不能实例化；
        不能包含任何非常量成员，任何field都是隐含着public static final的意义； 
        同时，没有非静态方法实现，也就是说要么是抽象方法，要么是静态方法。
  Java标准类库中，定义了非常多的接口，比如java.util.List。

  抽象类是不能实例化的类，用abstract修饰class，其目的主要是代码重用。
  除了不能实例化，形式上和一般的Java类并没有太大区别，可以有一个或者多个抽象方法，也可以没有抽象方法。
  抽象类大多用于抽取相关Java类的共有方法实现或者是共同成员变量，然后通过继承的方式达到代码复用的目的。
  Java标准类库中，比如collection框架，很多通用部分就被抽取成为抽象类，例如java.util.AbstractList。

  Java类实现interface使用implements关键字，继承abstract class则是使用extends关键字。

  知识扩展
  
  在一些情况下存在特定场景，需要抽象出与具体实现/实例化无关的通用逻辑，或者纯调用关系的逻辑，但是使用传统的抽象类会陷入到单继承的窘境。
  以往常见的做法是：实现由静态方法组成的工具类（utils），比如java.util.Collections。

  接口的职责也不仅仅限于抽象方法的集合，其实有各种不同的实践。有一类没有任何方法的接口，通常叫做Marker Interface，顾名思义，它的目的
  就是为了声明某些东西，比如我们熟知的Cloneable/Serializable等。
  
  面向对象基本设计原则：S.O.L.I.D原则
  单一职责（Simple Responsibility），类或者对象最好是只有单一职责，在程序设计中如果发现某个类承担着多种义务，可以考虑进行拆分。
  开关原则（Open-Close，Open for extension，close for modification），设计要对扩展开放，对修改关闭。换句话说，程序设计应该保证平滑的
           扩展性，尽量避免因为新增同类功能而修改已有实现，这样可以少产出些回归（regression）问题。
  里氏替换（Liskov Substitution），这是面向对象的基本要素之一，进行继承关系抽象时，凡是可以用父类或者基类的地方，都可以用子类替换。
  接口分离（Interface Segregation），我们在进行类和接口设计时，如果在一个接口里定义类太多方法，其子类很可能面临两难，就是只有部分方法
           对它是有意义的，这就破坏了程序的内聚性。对于这种情况，可以通过拆分为功能单一的多个接口，将行为进行解耦。在未来维护中，
           如果某个接口设计有变，不会对使用其他接口的子类造成影响。
  依赖反转（Dependency Inversion），实体应该依赖于抽象而不是具体实现。也就是说高层次模块，不应该依赖于低层次模块，而是应该依赖于抽象。
           实践这一原则是保证产品代码之间适当耦合度的法宝。
		   
		   
14、谈谈你知道的设计模式？请手动实现单例模式，Spring 等框架中使用了哪些模式？

  设计模式是人们为软件开发中相同表征的问题，抽象出的可重复利用的解决方案。
  
  按照模式的应用目标分类，设计模式可以分为创建型模式、结构型模式和行为型模式。
  
  创建型模式，是对对象创建过程的各种问题和解决方案的总结。包括各种工厂模式、单例模式、构造器模式、原型模式。
  
  结构型模式，是针对软件设计结构的总结，关注于类或对象继承、组合方式的实践经验。包括桥接模式、适配器模式、装饰器模式、代理模式、组合模式、外观模式、享元模式等。
  
  行为型模式，是从类或对象之间交互、职责划分等角度总结的模式。包括策略模式、解释器模式、命令模式、观察者模式、迭代器模式、模板方法模式、访问者模式等。
  
  设计模式典型使用场景举例：
  Java IO框架使用了装饰器模式
  java.lang.StringBuilder使用了构造器模式
  Spring框架中 BeanFactory和ApplicationContext应用了工厂模式；
               在Bean的创建中，Spring也为不同scope定义的对象，提供了单例和原型等模式实现；
			   AOP 使用了代理模式、装饰器模式、适配器模式等；
			   各种事件监听器，是观察者模式的典型应用；
			   类似JdbcTemplate等则是应用了模板模式
			   
  带双检锁的单例模式代码：
  public class Singleton {
      private static volatile Singleton singleton = null;
      private Singleton() {
      }

      public static Singleton getSingleton() {
        if (singleton == null) { // 尽量避免重复进入同步块
            synchronized (Singleton.class) { // 同步.class，意味着对同步类方法调用
                if (singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
      }
    }
  
15、Synchronized 和 ReentrantLock 有什么区别？有人说 Synchronized 最慢，这话靠谱吗？

  synchronized 是 Java 内建的同步机制，所以也有人称其为 Intrinsic Locking，它提供了互斥的语义和可见性，
  当一个线程已经获取当前锁时，其他试图获取的线程只能等待或者阻塞在那里。
  
  在 Java 5 以前，synchronized 是仅有的同步手段，
  在代码中，synchronized 可以用来修饰方法，也可以使用在特定的代码块上，
  本质上 synchronized 方法等同于把方法全部语句用 synchronized 块包起来。
  
  ReentrantLock，通常翻译为再入锁，是 Java 5 提供的锁实现，它的语义和 synchronized 基本相同。
  再入锁通过代码直接调用 lock（）方法获取，代码书写也更加灵活。
  与此同时，ReentrantLock 提供了很多实用的方法，能够实现很多 synchronized 无法做到的细节控制，比如可以控制fairness，也就是公平性，或者利用定义条件等。
  但是，编码中也需要注意，必须要明确调用unlock（）方法释放，不然就会一直持有该锁。
  
  synchronized 和 ReentrantLock 的性能不能一概而论，早期版本 synchronized 在很多场景下性能相差较大，在后续版本进行了较多改进，
  在低竞争场景中表现可能优于ReentrantLock。
  
  知识扩展
  
  线程安全：线程安全是一个多线程环境下正确性的概念，也就是保证多线程环境下共享的、可修改的状态的正确性，这里的状态反映在程序中其实可以看作是数据。
  
  如果状态不是共享的，或者不是可修改的，也就不存在线程安全问题。
  
  线程安全需要保证几个基本特性：
  原子性：简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现。
  可见性：是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上，volatile就是负责保证可见性的。
  有序性：是保证线程内串行语义，避免指令重排等。
  
  ReentrantLock 如何理解"再入"？
  它是表示当一个线程试图获取一个它已经获取的锁时，这个获取动作就自动成功，这是对锁获取粒度的一个概念，也就是锁的持有是以线程为单位而不是基于调用次数。
  
  再入锁可以设置公平性，可在创建再入锁时选择是否是公平的。
  ReentrantLock fairLock = new ReentrantLock(true);
  这里的公平性是指在竞争场景中，当公平性为真时，会倾向于将锁赋予等待时间最久的线程。公平性是减少线程“饥饿”（个别线程长期等待，但始终无法获取）情况发生的一个办法。
  
16、synchronized 底层如何实现？什么是锁的升级、降级？

  synchronized 代码块是由一对 monitorenter/monitorexit 指令实现的，Monitor对象是同步的基本实现单元。
  
  在Java 6 之前，Monitor 的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作。
  
  现代的（Oracle）JDK中，JVM对此进行了大刀阔斧的改进，提供了三种不同的Monitor 实现，也就是常说的三种不同的锁：偏向锁（Biased Locking）、轻量级锁和重量级锁，
  大大改进了其性能。
  
  所谓的升级、降级，就是JVM 优化synchronized 运行的一种机制，当JVM 检测到不同的竞争状态时，会自动切换到合适的锁实现，这种切换就是锁的升级、降级。
  
  当没有竞争出现时，默认会使用偏向锁。JVM 会利用CAS 操作（compare and swap），在对象头上的Mark Word 部分设置线程ID，以表示这个对象偏向于当前线程，所以并不涉及
  真正的互斥锁。这样做的假设是基于在很多应用场景中，大部分对象生命周期中最多会被一个线程锁定，使用偏向锁可以降低无竞争开销。
  
  如果有另外的线程试图锁定某个已经被偏向过的对象，JVM就需要撤销（revoke）偏向锁，并切换到轻量级锁。轻量级锁依赖CAS操作Mark Word 来试图获取锁，如果重试成功，
  就使用普通的轻量级锁；否则，进一步升级为重量级锁。

  



  

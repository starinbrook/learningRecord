
Java核心技术36讲


1 谈谈你对 Java 平台的理解？“Java 是解释执行”，这句话正确吗？
  
  Java本身是一种面向对象的语言，最显著的特性有两个方面，一是所谓的“一次编译，到处执行”（Compile once，run anywhere），
能够非常容易地获得跨平台能力；另外就是垃圾收集（GC，Garbage Collection），Java通过垃圾收集器（Garbage Collector）回收分配
内存，大部分情况下，程序员不需要自己操心内存的分配和回收。
  
  我们日常会接触到JRE（Java Runtime Environment）或者JDK（Java Development Kit）。JRE，也就是Java运行环境，包含了JVM和Java
类库，以及一些模块等。而JDK可以看作是JRE的一个超集，提供了更多工具，比如编译器/各种诊断工具等。

  对于“Java是解释执行”这句话，这个说法不太准确。我们开发的Java源代码，首先通过javac编译成为字节码（bytecode），然后，在
运行时，通过Java虚拟机（JVM）内嵌的解释器将字节码转换成为最终的机器码。但是常见的JVM，比如我们大多数情况使用的Oracle JDK
提供的Hotspot JVM，都提供了JIT（Just-In-Time）编译器，也就是通常所说的动态编译器，JIT能够在运行时将热点代码编译成机器码，这
种情况下部分热点代码就属于编译执行，而不是解释执行了。

  众所周知，我们通常把Java分为编译期和运行时。这里说的Java的编译和C/C++是有着不同意义的，Java的编译，编译Java源码生成
“.class”文件，里面实际是字节码，而不是可以直接执行的机器码。Java通过字节码和Java虚拟机（JVM）这种跨平台的抽象，屏蔽了
操作系统和硬件的细节，这也是实现“一次编译，到处执行”的基础。

  在运行时，JVM会通过类加载器（Class-Loader）加载字节码，解释或者编译执行。主流Java版本中，如JDK8实际是解释和编译混合的一种
模式，即所谓的混合模式（-Xmixed）。